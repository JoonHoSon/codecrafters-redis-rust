// Uncomment this block to pass the first stage
// use std::net::TcpListener;

use std::io::{Read, Write};
use std::net::TcpListener;
use std::thread;

const CRLF: &[u8; 2] = b"\r\n";
const CRLF_SIZE: usize = 2;

fn main() {
    // You can use print statements as follows for debugging, they'll be visible when running tests.
    let listener = TcpListener::bind("127.0.0.1:6379").unwrap();

    // *2\r\n$4\r\necho\r\n$3\r\nhey\r\n
    // ["echo", "hey"]

    for stream in listener.incoming() {
        thread::spawn(move || match stream {
            Ok(mut st) => {
                let mut buffer: [u8; 1024] = [0; 1024];
                let mut read: Vec<u8> = vec![];

                loop {
                    // read all bytes
                    let rr = st.read(&mut buffer).expect("Stream read fail!");

                    if rr == 0 {
                        break;
                    }

                    read.append(&mut buffer.to_vec());

                    if read.len() == 1024 && &read[read.len() - 2..] == &[0, 0] {
                        break; // terminate empty bytes
                    }
                }

                if read.len() == 0 {
                    return;
                }

                let payload: String = String::from_utf8(buffer.to_vec()).unwrap();

                // ping or echo
                if buffer[0] == b'*' {
                    let crlf_pos = buffer[1..]
                        .windows(CRLF_SIZE)
                        .position(|w| w == CRLF)
                        .unwrap();
                    let size = 
                }

                st.write_all(payload.as_bytes()).expect("write fail!");
            }
            Err(e) => {
                println!("error: {e}")
            }
        });
    }
}

fn parse_string(buffer: &[u8], before_start: usize) -> (String, usize) {
    println!("parse_string parameter before start : {before_start:?}");
    // $4\r\necho\r\n
    let mut start = 1;
    // find \r\n position
    let pos = buffer[start..]
        .windows(CRLF_SIZE)
        .position(|w| w == CRLF)
        .unwrap()
        + 1; // start '4'

    let string_length = String::from_utf8(buffer[start..pos].to_vec())
        .unwrap()
        .parse::<usize>()
        .unwrap();
    start += CRLF_SIZE + 1;

    // FIXME(joonho): 2024-03-21 마지막일 경우 start값 처리 수정 필요

    return (
        String::from_utf8(buffer[start..=(string_length + 1 + pos)].to_vec()).unwrap(),
        start + string_length + pos + before_start,
    );
}

#[cfg(test)]
mod tests {
    use crate::parse_string;

    #[test]
    fn parse_string_test() {
        let raw_data = b"$4\r\necho\r\n$5\r\nhello";
        let (result, start) = parse_string(raw_data, 0);

        assert_eq!("echo", result);
        assert_eq!(10, start);

        //let (result, start) = parse_string(&raw_data[start..], start);

        // TODO(joonho): 2024-03-21 parse_string 수정 후 다시 테스트 필요
        //assert_eq!("hello", result);
        //assert_eq!(raw_data.len(), start);
    }
}
